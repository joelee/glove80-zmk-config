
/*
 * Copyright (c) 2020 The ZMK Contributors
 * Copyright (c) 2023 Innaworks Development Limited, trading as MoErgo
 *
 * SPDX-License-Identifier: MIT
 */


/* THIS FILE WAS GENERATED BY GLOVE80 LAYOUT EDITOR
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
/* Include all behaviour includes needed */
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>

/* Automatically generated layer name #define */
#define LAYER_Base 0
#define LAYER_Lower 1
#define LAYER_Magic 2
#define LAYER_Num 3
#define LAYER_Sym 4
#define LAYER_Func 5
#define LAYER_NumPad 6
#define LAYER_Tiling 7

/* To deal with the situation where there is no Lower layer, to keep &lower happy */
#ifndef LAYER_Lower
#define LAYER_Lower 0
#endif

/* Custom Device-tree */



/* Glove80 system behavior & macros */
/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to
        lower: lower {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo LAYER_Lower>, <&to LAYER_Lower>;
        };
    };
};

/ {
    macros {
        rgb_ug_status_macro: rgb_ug_status_macro {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&rgb_ug RGB_STATUS>;
        };

        bt_0: bt_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };

        bt_1: bt_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };

        bt_2: bt_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };

        bt_3: bt_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };
};

/ {
    behaviors {
        magic: magic {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };
    };
};

/* #define for key positions */
#define POS_LH_T1 52
#define POS_LH_T2 53
#define POS_LH_T3 54
#define POS_LH_T4 69
#define POS_LH_T5 70
#define POS_LH_T6 71
#define POS_LH_C1R2 15
#define POS_LH_C1R3 27
#define POS_LH_C1R4 39
#define POS_LH_C1R5 51
#define POS_LH_C2R1 4
#define POS_LH_C2R2 14
#define POS_LH_C2R3 26
#define POS_LH_C2R4 38
#define POS_LH_C2R5 50
#define POS_LH_C2R6 68
#define POS_LH_C3R1 3
#define POS_LH_C3R2 13
#define POS_LH_C3R3 25
#define POS_LH_C3R4 37
#define POS_LH_C3R5 49
#define POS_LH_C3R6 67
#define POS_LH_C4R1 2
#define POS_LH_C4R2 12
#define POS_LH_C4R3 24
#define POS_LH_C4R4 36
#define POS_LH_C4R5 48
#define POS_LH_C4R6 66
#define POS_LH_C5R1 1
#define POS_LH_C5R2 11
#define POS_LH_C5R3 23
#define POS_LH_C5R4 35
#define POS_LH_C5R5 47
#define POS_LH_C5R6 65
#define POS_LH_C6R1 0
#define POS_LH_C6R2 10
#define POS_LH_C6R3 22
#define POS_LH_C6R4 34
#define POS_LH_C6R5 46
#define POS_LH_C6R6 64
#define POS_RH_T1 57
#define POS_RH_T2 56
#define POS_RH_T3 55
#define POS_RH_T4 74
#define POS_RH_T5 73
#define POS_RH_T6 72
#define POS_RH_C1R2 16
#define POS_RH_C1R3 28
#define POS_RH_C1R4 40
#define POS_RH_C1R5 58
#define POS_RH_C2R1 5
#define POS_RH_C2R2 17
#define POS_RH_C2R3 29
#define POS_RH_C2R4 41
#define POS_RH_C2R5 59
#define POS_RH_C2R6 75
#define POS_RH_C3R1 6
#define POS_RH_C3R2 18
#define POS_RH_C3R3 30
#define POS_RH_C3R4 42
#define POS_RH_C3R5 60
#define POS_RH_C3R6 76
#define POS_RH_C4R1 7
#define POS_RH_C4R2 19
#define POS_RH_C4R3 31
#define POS_RH_C4R4 43
#define POS_RH_C4R5 61
#define POS_RH_C4R6 77
#define POS_RH_C5R1 8
#define POS_RH_C5R2 20
#define POS_RH_C5R3 32
#define POS_RH_C5R4 44
#define POS_RH_C5R5 62
#define POS_RH_C5R6 78
#define POS_RH_C6R1 9
#define POS_RH_C6R2 21
#define POS_RH_C6R3 33
#define POS_RH_C6R4 45
#define POS_RH_C6R5 63
#define POS_RH_C6R6 79

    /* Custom Defined Behaviors */
/ {
    #define COMBO_TIMEOUT       50
#define COMBO_TIMEOUT_SHORT 35

#define MACRO_WAIT_TIME     30
#define MACRO_TAP_TIME      30


behaviors {

    //////////////////////////////////////////////////////////////////////////
    //
    // Miryoku layers and home row mods (ported from my QMK endgame)
    // - https://sunaku.github.io/home-row-mods.html#porting-to-zmk
    // - https://github.com/urob/zmk-config#timeless-homerow-mods
    //
    //////////////////////////////////////////////////////////////////////////

    //
    // HOMEY_HOLDING_TYPE defines the flavor of ZMK hold-tap behavior to use
    // for the pinky, ring, and middle fingers (which are assigned to Super,
    // Alt, and Ctrl respectively in the Miryoku system) on home row keys.
    //
    #ifndef HOMEY_HOLDING_TYPE
    #define HOMEY_HOLDING_TYPE "tap-preferred"
    #endif

    //
    // HOMEY_HOLDING_TIME defines how long you need to hold (milliseconds)
    // home row mod keys in order to send their modifiers to the computer
    // (i.e. "register" them) for mod-click mouse usage (e.g. Ctrl-Click).
    //
    #ifndef HOMEY_HOLDING_TIME
    #define HOMEY_HOLDING_TIME 270 // TAPPING_TERM + ALLOW_CROSSOVER_AFTER
    #endif

    //
    // HOMEY_STREAK_DECAY defines how long you need to wait (milliseconds)
    // after typing before you can use home row mods again.  It prevents
    // unintended activation of home row mods when you're actively typing.
    //
    #ifndef HOMEY_STREAK_DECAY
    #define HOMEY_STREAK_DECAY 170 // global-quick-tap-ms
    #endif

    //
    // HOMEY_REPEAT_DECAY defines how much time you have left (milliseconds)
    // after tapping a key to hold it again in order to make it auto-repeat.
    //
    #ifndef HOMEY_REPEAT_DECAY
    #define HOMEY_REPEAT_DECAY 300 // "tap then hold" for key auto-repeat
    #endif

    //
    // SHIFT_HOLDING_TYPE defines the flavor of ZMK hold-tap behavior to use
    // for index fingers (which Miryoku assigns to Shift) on home row keys.
    //
    // NOTE: The "tap-preferred" flavor of ZMK hold-tap for index finger keys
    // allows faster activation of the Shift modifier (without having to wait
    // for the modified key to be released as the "balanced" flavor requires).
    // Typing streaks and the `hold-trigger-on-release` setting are disabled
    // for the index fingers so as not to hinder their speed and dexterity.
    //
    #ifndef SHIFT_HOLDING_TYPE
    #define SHIFT_HOLDING_TYPE "tap-preferred"
    #endif

    //
    // SHIFT_HOLDING_TIME defines how long you need to hold (milliseconds)
    // index finger keys in order to send their modifiers to the computer
    // (i.e. "register" them) for mod-click mouse usage (e.g. Shift-Click).
    //
    // CAUTION: You'll need to perform inward rolls from pinky->ring->middle
    // fingers toward the index fingers when activating multiple modifiers
    // because `hold-trigger-on-release` is disabled for the index fingers.
    // Otherwise, you may be surprised that the index fingers' modifier is
    // sent immediately without the rest of your multi-mod chord when you
    // perform outward rolls from your index fingers toward your pinkies.
    //
    #ifndef SHIFT_HOLDING_TIME
    #define SHIFT_HOLDING_TIME 170
    #endif

    //
    // SHIFT_STREAK_DECAY defines how long you need to wait (milliseconds)
    // after typing before you can use home row mods again.  It prevents
    // unintended activation of home row mods when you're actively typing.
    //
    #ifndef SHIFT_STREAK_DECAY
    #define SHIFT_STREAK_DECAY 70 // global-quick-tap-ms
    #endif

    //
    // SHIFT_REPEAT_DECAY defines how much time you have left (milliseconds)
    // after tapping a key to hold it again in order to make it auto-repeat.
    //
    #ifndef SHIFT_REPEAT_DECAY
    #define SHIFT_REPEAT_DECAY 300 // "tap then hold" for key auto-repeat
    #endif

    //
    // THUMB_HOLDING_TYPE defines the flavor of ZMK hold-tap behavior to use
    // for the thumbs (which are assigned to 6 layers in the Miryoku system).
    //
    // NOTE: The "balanced" flavor of ZMK hold-tap provides instant modifier
    // activation for the symbol layer (if the tapped symbol key is released
    // while the thumb layer key is still held down) for quicker programming.
    //
    #ifndef THUMB_HOLDING_TYPE
    #define THUMB_HOLDING_TYPE "balanced"
    #endif

    //
    // THUMB_HOLDING_TIME defines how long you need to hold (milliseconds)
    // a thumb key to activate a layer.  Shorter holds are treated as taps.
    //
    #ifndef THUMB_HOLDING_TIME
    #define THUMB_HOLDING_TIME 200
    #endif

    //
    // THUMB_REPEAT_DECAY defines how much time you have left (milliseconds)
    // after tapping a key to hold it again in order to make it auto-repeat.
    //
    #ifndef THUMB_REPEAT_DECAY
    #define THUMB_REPEAT_DECAY 300 // "tap then hold" for key auto-repeat
    #endif

    //
    // SPACE_HOLDING_TIME defines how long you need to hold (milliseconds)
    // the space thumb key to activate.  Shorter holds are treated as taps.
    //
    #ifndef SPACE_HOLDING_TIME
    #define SPACE_HOLDING_TIME 170
    #endif

    //
    // SPACE_REPEAT_DECAY defines how much time you have left (milliseconds)
    // after tapping a key to hold it again in order to make it auto-repeat.
    //
    #ifndef SPACE_REPEAT_DECAY
    #define SPACE_REPEAT_DECAY 200 // "tap then hold" for key auto-repeat
    #endif

    //
    // Glove80 key positions index for positional hold-tap
    // - https://discord.com/channels/877392805654306816/937645688244826154/1066713913351221248
    // - https://media.discordapp.net/attachments/937645688244826154/1066713913133121556/image.png
    //
    // |------------------------|------------------------|
    // | LEFT_HAND_KEYS         |        RIGHT_HAND_KEYS |
    // |                        |                        |
    // |  0  1  2  3  4         |          5  6  7  8  9 |
    // | 10 11 12 13 14 15      |      16 17 18 19 20 21 |
    // | 22 23 24 25 26 27      |      28 29 30 31 32 33 |
    // | 34 35 36 37 38 39      |      40 41 42 43 44 45 |
    // | 46 47 48 49 50 51      |      58 59 60 61 62 63 |
    // | 64 65 66 67 68         |         75 76 77 78 79 |
    // |                69 52   |   57 74                |
    // |                 70 53  |  56 73                 |
    // |                  71 54 | 55 72                  |
    // |------------------------|------------------------|
    //
    #define LEFT_HAND_KEYS      \
          0  1  2  3  4         \
         10 11 12 13 14 15      \
         22 23 24 25 26 27      \
         34 35 36 37 38 39      \
         46 47 48 49 50 51      \
         64 65 66 67 68
    #define RIGHT_HAND_KEYS     \
                                           5  6  7  8  9 \
                                       16 17 18 19 20 21 \
                                       28 29 30 31 32 33 \
                                       40 41 42 43 44 45 \
                                       58 59 60 61 62 63 \
                                          75 76 77 78 79
    #define THUMB_KEYS          \
                        69 52       57 74                \
                         70 53     56 73                 \
                          71 54   55 72

    //
    // Home row mod-tap keys for all except index fingers
    //
    hrm_l: miryoku_home_row_mods_left_hand {
        compatible = "zmk,behavior-hold-tap";
        label = "HOME_ROW_MODS_LEFT_HAND";
        flavor = HOMEY_HOLDING_TYPE;
        hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <HOMEY_HOLDING_TIME>;
        quick-tap-ms = <HOMEY_REPEAT_DECAY>;
        require-prior-idle-ms = <HOMEY_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&kp>, <&kp>;
    };
    hrm_r: miryoku_home_row_mods_right_hand {
        compatible = "zmk,behavior-hold-tap";
        label = "HOME_ROW_MODS_RIGHT_HAND";
        flavor = HOMEY_HOLDING_TYPE;
        hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <HOMEY_HOLDING_TIME>;
        quick-tap-ms = <HOMEY_REPEAT_DECAY>;
        require-prior-idle-ms = <HOMEY_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&kp>, <&kp>;
    };

    //
    // Special home row mod-tap keys for the index fingers
    //
    hrm_li: miryoku_home_row_mods_left_shift_shift {
        compatible = "zmk,behavior-hold-tap";
        label = "HOME_ROW_MODS_LEFT_SHIFT_SHIFT";
        flavor = SHIFT_HOLDING_TYPE;
        hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
        //hold-trigger-on-release; // don't wait for other mods
        tapping-term-ms = <SHIFT_HOLDING_TIME>;
        quick-tap-ms = <SHIFT_REPEAT_DECAY>;
        require-prior-idle-ms = <SHIFT_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&kp>, <&kp>;
    };
    hrm_ri: miryoku_home_row_mods_right_shift_shift {
        compatible = "zmk,behavior-hold-tap";
        label = "HOME_ROW_MODS_RIGHT_SHIFT_SHIFT";
        flavor = SHIFT_HOLDING_TYPE;
        hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
        //hold-trigger-on-release; // don't wait for other mods
        tapping-term-ms = <SHIFT_HOLDING_TIME>;
        quick-tap-ms = <SHIFT_REPEAT_DECAY>;
        require-prior-idle-ms = <SHIFT_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&kp>, <&kp>;
    };

    //
    // Thumb cluster hold-tap keys for Miryoku layers
    //
    thumb: miryoku_thumb_layer {
        compatible = "zmk,behavior-hold-tap";
        label = "MIRYOKU_THUMB_LAYER";
        flavor = THUMB_HOLDING_TYPE;
        tapping-term-ms = <THUMB_HOLDING_TIME>;
        quick-tap-ms = <THUMB_REPEAT_DECAY>; // enable repeat
        //global-quick-tap; // no typing streak
        //retro-tap; // don't allow slow (hold-like) taps
        #binding-cells = <2>;
        bindings = <&mo>, <&kp>;
    };
    space: miryoku_thumb_layer_spacebar {
        compatible = "zmk,behavior-hold-tap";
        label = "MIRYOKU_THUMB_LAYER_SPACEBAR";
        flavor = THUMB_HOLDING_TYPE;
        tapping-term-ms = <SPACE_HOLDING_TIME>;
        quick-tap-ms = <SPACE_REPEAT_DECAY>; // enable repeat
        //global-quick-tap; // no typing streak
        retro-tap; // allow slow (hold-like) taps
        #binding-cells = <2>;
        bindings = <&mo>, <&kp>;
    };

    t_mt: thumb_mt {
        compatible = "zmk,behavior-hold-tap";
        label = "THUMB_MOD_TAP";
        flavor = THUMB_HOLDING_TYPE;
        tapping-term-ms = <SPACE_HOLDING_TIME>;
        quick-tap-ms = <SPACE_REPEAT_DECAY>; // enable repeat
        //global-quick-tap; // no typing streak
        retro-tap; // allow slow (hold-like) taps
        #binding-cells = <2>;
        bindings = <&kp>, <&kp>;
    };

//    hyper_esc: hyper_esc_key {
//        compatible = "zmk,behavior-hold-tap";
//        label = "HYPER_ESC_KEY";
//        flavor = THUMB_HOLDING_TYPE;
//        tapping-term-ms = <THUMB_HOLDING_TIME>;
//        quick-tap-ms = <THUMB_REPEAT_DECAY>; // enable repeat
//        //global-quick-tap; // no typing streak
//        //retro-tap; // don't allow slow (hold-like) taps
//        #binding-cells = <0>;
//        bindings = <&kp LG(LA(LC(LSHFT)))>, <&kp ESC>;
//    };

    //////////////////////////////////////////////////////////////////////////
    //
    // Custom shifted pairs
    //
    //////////////////////////////////////////////////////////////////////////

    //
    // Shift + CapsWord = CapsLock
    //
    cappy: capsword_and_capslock {
        compatible = "zmk,behavior-mod-morph";
        label = "CAPSWORD_AND_CAPSLOCK";
        #binding-cells = <0>;
        bindings = <&caps_word>, <&kp CAPSLOCK>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };

    //////////////////////////////////////////////////////////////////////////
    //
    // ZMK global overrides
    //
    //////////////////////////////////////////////////////////////////////////

    //
    // CapsWord - ported from Pascal Getreuer's extension for QMK
    // - https://zmk.dev/docs/behaviors/caps-word
    // - https://getreuer.info/posts/keyboards/caps-word/index.html
    //
    behavior_caps_word {
        continue-list = <
            UNDERSCORE MINUS
            BACKSPACE DELETE
            N1 N2 N3 N4 N5 N6 N7 N8 N9 N0
        >;
    };

};


macros {
    // Reference: https://zmk.dev/docs/behaviors/macros

    #ifndef MACRO_WAIT_TIME
    #define MACRO_WAIT_TIME 30
    #endif

    #ifndef MACRO_TAP_TIME
    #define MACRO_TAP_TIME 30
    #endif

    select_line: select_line_macro {
        label = "SEL_LINE";
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        wait-ms = <MACRO_WAIT_TIME>;
        tap-ms = <MACRO_TAP_TIME>;
        bindings = <&kp LG(RIGHT) &kp LG(LEFT) &kp LG(LS(RIGHT))>;
    };

    select_word: select_word_macro {
        label = "SEL_WORD";
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        wait-ms = <MACRO_WAIT_TIME>;
        tap-ms = <MACRO_TAP_TIME>;
        bindings = <&kp LA(RIGHT) &kp LA(LEFT) &kp LA(LS(RIGHT))>;
    };

    copy_all: copy_all_macro {
        label = "COPY_ALL";
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        wait-ms = <MACRO_WAIT_TIME>;
        tap-ms = <MACRO_TAP_TIME>;
        bindings = <&kp LG(A) &kp LG(C)>;
    };
};


/*
conditional_layers {
    // Reference: https://zmk.dev/docs/features/conditional-layers

    compatible = "zmk,conditional-layers";
    tri_layer {
        if-layers = <1 3>;
        then-layer = <7>;
    };
};
*/


combos {
    // Reference: https://zmk.dev/docs/features/combos

    #ifndef COMBO_TIMEOUT
    #define COMBO_TIMEOUT 50
    #endif

    #ifndef COMBO_TIMEOUT_SHORT
    #define COMBO_TIMEOUT_SHORT 35
    #endif

    compatible = "zmk,combos";
    combo_amethyst {
        // Left thumb T1+T4 -> MO Layer 7
        bindings = <&mo 7>;
        key-positions = <69 52>;
        layers = <0>;
        timeout-ms = <COMBO_TIMEOUT>;
    };

    combo_alfred {
        // Left & Right T5s -> LG(SPACE)
        bindings = <&kp LG(SPACE)>;
        key-positions = <70 73>;
        layers = <0>;
        timeout-ms = <COMBO_TIMEOUT>;
    };

    combo_l_hyper {
        // Left T2+T3 -> Left Hyper
        timeout-ms = <COMBO_TIMEOUT>;
        key-positions = <53 54>;
        bindings = <&kp LG(LC(LA(LSHIFT)))>;
    };

    combo_r_hyper {
        // Right T2+T3 -> Right Hyper
        timeout-ms = <COMBO_TIMEOUT>;
        key-positions = <55 56>;
        bindings = <&kp RG(RC(RA(RSHIFT)))>;
    };
};

};

    /* Automatically generated keymap */
/ {
    keymap {
        compatible = "zmk,keymap";


        layer_Base {
            bindings = <
               &kp F1         &kp F2         &kp F3          &kp F4           &kp F5                                                                                                                                                                   &kp F6          &kp F7         &kp F8         &kp F9    &kp F10
            &kp GRAVE         &kp N1         &kp N2          &kp N3           &kp N4  &kp N5                                                                                                                                          &kp N6           &kp N7          &kp N8         &kp N9         &kp N0  &kp MINUS
         &mt LGUI TAB          &kp Q          &kp W           &kp F            &kp P   &kp B                                                                                                                                           &kp J            &kp L           &kp U          &kp Y       &kp SEMI  &kp EQUAL
              &kp ESC  &hrm_l LGUI A  &hrm_l LALT R  &hrm_l LCTRL S  &hrm_li LSHFT T   &kp G                                                                                                                                           &kp M  &hrm_ri LSHFT N  &hrm_r LCTRL E  &hrm_r LALT I  &hrm_r LGUI O    &kp SQT
             &kp BSLH          &kp Z          &kp X           &kp C            &kp D   &kp V                 &kp LSHFT              &kp LGUI  &kp LCTRL              &t_mt RCTRL ESC       &t_mt RGUI DELETE   &t_mt RSHFT BACKSPACE   &kp K            &kp H       &kp COMMA        &kp DOT       &kp FSLH  &kp PG_UP
 &magic LAYER_Magic 0       &kp HOME        &kp END        &kp LBKT         &kp RBKT          &space LAYER_Lower SPACE  &thumb LAYER_Num TAB   &kp LALT  &thumb LAYER_Func LS(MINUS)  &thumb LAYER_Num ENTER  &space LAYER_Sym SPACE                 &kp LEFT        &kp DOWN         &kp UP      &kp RIGHT  &kp PG_DN
            >;
        };

        layer_Lower {
            bindings = <
         &none          &none          &none         &none            &none                                                                                                     &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP        &kp F11   &kp F12
         &none          &none          &none         &none            &none              &none                                                                         &none         &none         &none         &none          &none  &kp BSPC
     &copy_all      &kp LG(A)   &select_word  &select_line            &none  &kp LS(LA(LG(C)))                                                                     &kp GRAVE     &kp MINUS     &kp EQUAL      &kp LBKT       &kp RBKT  &kp BSLH
      &kp CAPS  &mt LGUI LEFT  &mt LALT DOWN  &mt LCTRL UP  &mt LSHFT RIGHT      &kp LG(SPACE)                                                                       &kp ESC      &kp LEFT      &kp DOWN        &kp UP      &kp RIGHT   &kp TAB
 &kp LG(LS(Z))      &kp LG(Z)      &kp LG(X)     &kp LG(C)        &kp LG(V)  &kp LS(LA(LG(S)))   &mo 7   &trans  &trans  &sk LS(LC(LA(LGUI)))  &kp DEL   &kp BSPC    &kp INS      &kp HOME     &kp PG_DN     &kp PG_UP        &kp END   &kp DEL
         &to 0     &kp C_PLAY   &kp C_VOL_DN  &kp C_VOL_UP       &kp C_MUTE                     &trans  &kp TAB  &trans     &sk LC(LA(LSHFT))  &kp RET  &kp SPACE             &kp LC(LEFT)  &kp LC(DOWN)    &kp LC(UP)  &kp LC(RIGHT)     &to 0
            >;
        };

        layer_Magic {
            bindings = <
  &bt BT_CLR            &none         &kp CAPS       &kp KP_NUM         &kp SLCK                                                                                      &none         &none         &none       &none  &bt BT_CLR_ALL
       &none            &none            &none            &none            &none            &none                                                         &none       &none         &none         &none       &none           &none
       &none  &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                         &none       &none         &none         &none       &none           &none
 &bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                         &none       &none         &none         &none       &none     &bootloader
  &sys_reset            &none            &none            &none            &none  &rgb_ug RGB_EFR   &bt_2   &bt_3         &none   &none   &none   &none   &none       &none         &none         &none       &none      &sys_reset
       &none            &none            &none            &none            &none                    &bt_0   &bt_1  &out OUT_USB   &none   &none   &none          &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP  &kp C_PLAY           &none
            >;
        };

        layer_Num {
            bindings = <
  &none     &none      &none   &none    &none                                                                                         &none         &none        &none           &none   &none
  &none     &none      &none   &none    &none          &none                                                            &none         &none         &none        &none           &none   &none
  &to 6  &kp FSLH     &kp N7  &kp N8   &kp N9     &kp LS(N8)                                                         &kp FSLH        &kp N7        &kp N8       &kp N9      &kp LS(N8)   &none
  &none    &kp N0     &kp N4  &kp N5   &kp N6      &kp MINUS                                                           &kp N0  &mt LSHFT N4  &mt LCTRL N5  &mt LALT N6  &mt LGUI MINUS   &none
  &none   &kp DOT     &kp N1  &kp N2   &kp N3  &kp LS(EQUAL)     &trans  &trans  &trans  &trans  &kp DEL   &kp BSPC   &kp DOT        &kp N1        &kp N2       &kp N3   &kp LS(EQUAL)   &none
  &to 0     &none  &kp COMMA  &kp N0  &kp DOT                 &kp SPACE  &trans  &trans   &mo 6   &trans  &kp SPACE               &kp COMMA        &kp N0      &kp DOT           &none   &to 0
            >;
        };

        layer_Sym {
            bindings = <
         &none           &none          &none       &none       &none                                                                                              &none          &none        &none         &none          &none
         &none           &none          &none       &none       &none         &none                                                                 &none          &none          &none        &none         &none          &none
 &kp LS(EQUAL)      &kp LS(N1)     &kp LS(N2)  &kp LS(N3)  &kp LS(N4)    &kp LS(N5)                                                            &kp LS(N6)     &kp LS(N7)     &kp LS(N8)   &kp LS(N9)    &kp LS(N0)  &kp LS(MINUS)
         &none      &kp LA(N3)  &kp LS(COMMA)  &kp LS(N9)    &kp LBKT  &kp LS(LBKT)                                                             &kp GRAVE      &kp MINUS      &kp EQUAL      &kp SQT      &kp BSLH          &none
         &none  &kp LS(LA(N2))    &kp LS(DOT)  &kp LS(N0)    &kp RBKT  &kp LS(RBKT)     &trans   &trans  &trans  &trans  &trans   &kp BSPC  &kp LS(GRAVE)  &kp LS(MINUS)  &kp LS(EQUAL)  &kp LS(SQT)  &kp LS(BSLH)          &none
         &to 0           &none          &none       &none       &none                &kp SPACE  &kp TAB  &trans  &trans  &trans  &kp SPACE                         &none          &none        &none         &none          &to 0
            >;
        };

        layer_Func {
            bindings = <
 &kp F11          &kp F12  &kp F13  &kp F14     &kp F15                                                                                &kp F16    &kp F17   &kp F18   &kp F19  &kp F20
 &kp F16          &kp F17  &kp F18  &kp F19     &kp F20  &kp F21                                                              &none      &none      &none     &none     &none    &none
 &kp F22        &kp PSCRN   &kp F7   &kp F8      &kp F9  &kp F10                                                              &none      &none      &none     &none     &none    &none
 &kp F23         &kp SLCK   &kp F4   &kp F5      &kp F6  &kp F11                                                              &none  &kp LSHFT  &kp LCTRL  &kp LALT  &kp LGUI    &none
 &kp F24  &kp PAUSE_BREAK   &kp F1   &kp F2      &kp F3  &kp F12     &trans   &trans  &trans  &kp C_PWR  &kp DEL   &kp BSPC   &none      &none      &none     &none     &none    &none
   &to 0            &none    &none    &none  &kp C_MENU           &kp SPACE  &kp TAB  &trans     &trans  &kp RET  &kp SPACE              &none      &none     &none     &none    &to 0
            >;
        };

        layer_NumPad {
            bindings = <
      &none         &none      &none      &none       &none                                                                                     &none      &none       &none       &none   &none
      &none         &none      &none      &none       &none            &none                                                         &none      &none      &none  &kp LS(N9)  &kp LS(N0)   &none
      &to 0  &kp KP_SLASH  &kp KP_N7  &kp KP_N8   &kp KP_N9  &kp KP_MULTIPLY                                                         &none      &none      &none       &none       &none   &none
 &kp KP_NUM     &kp KP_N0  &kp KP_N4  &kp KP_N5   &kp KP_N6     &kp KP_MINUS                                                         &none  &kp LSHFT  &kp LCTRL    &kp LALT    &kp LGUI   &none
      &none     &kp KP_N0  &kp KP_N1  &kp KP_N2   &kp KP_N3      &kp KP_PLUS  &kp KP_ENTER  &trans  &trans  &trans  &trans  &trans   &none      &none  &kp COMMA     &kp DOT    &kp FSLH   &none
      &to 0         &none  &kp KP_N0  &kp KP_N0  &kp KP_DOT                      &kp SPACE  &trans  &trans  &trans  &trans  &trans              &none      &none       &none       &none   &to 0
            >;
        };

        layer_Tiling {
            bindings = <
  &none              &none              &none              &none              &none                                                                                                                                      &none               &none                 &none                  &none              &none
  &none              &none              &none              &none              &none              &none                                                                                             &none                 &none               &none                 &none                  &none    &kp LS(LA(DOT))
  &none  &kp LS(LA(LC(A)))  &kp LS(LA(LC(S)))  &kp LS(LA(LC(F)))  &kp LS(LA(LC(D)))  &kp LS(LA(LC(G)))                                                                                             &none     &kp LS(LA(LC(H)))   &kp LS(LA(LC(J)))     &kp LS(LA(LC(K)))      &kp LS(LA(LC(L)))  &kp LS(LA(COMMA))
  &none      &kp LS(LA(A))      &kp LS(LA(S))      &kp LS(LA(D))      &kp LS(LA(F))      &kp LS(LA(G))                                                                                     &kp LS(LA(M))         &kp LS(LA(H))       &kp LS(LA(J))         &kp LS(LA(K))          &kp LS(LA(L))              &none
  &to 0              &none  &kp LS(LA(LC(X)))  &kp LS(LA(LC(T)))      &kp LS(LA(T))          &kp LCTRL  &trans   &none   &none  &kp LS(LA(LC(Z)))    &kp LS(LA(I))  &kp LS(LC(LA(SPACE)))          &none      &kp LS(LA(LBKT))    &kp LS(LA(RBKT))  &kp LS(LA(LC(LBKT)))   &kp LS(LA(LC(RBKT)))      &kp LS(LA(P))
 &trans             &trans             &trans             &trans             &trans                     &trans   &none   &none      &kp LS(LA(Z))  &kp LS(LA(RET))      &kp LS(LA(SPACE))                 &kp LS(LA(LC(LEFT)))  &kp LS(LA(LC(N2)))    &kp LS(LA(LC(N1)))  &kp LS(LA(LC(RIGHT)))      &kp LS(LA(N))
            >;
        };

    };
};
