/*
 * Copyright (c) 2020 The ZMK Contributors
 * Copyright (c) 2023 Innaworks Development Limited, trading as MoErgo
 *
 * SPDX-License-Identifier: MIT
 */
/* THIS FILE WAS GENERATED BY GLOVE80 LAYOUT EDITOR
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>

/* Include all behaviour includes needed */

#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

/* Automatically generated layer name #define */

#define LAYER_Base 0
#define LAYER_Lower 1
#define LAYER_Magic 2
#define LAYER_Num 3
#define LAYER_Sym 4
#define LAYER_Func 5
#define LAYER_NumPad 6
#define LAYER_Tiling 7

/* To deal with the situation where there is no Lower layer, to keep &lower happy */

#ifndef LAYER_Lower

#define LAYER_Lower 0

#

endif {
    /* Custom Device-tree */
    /* Glove80 system behavior & macros */

    /

    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to

        lower: lower {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo LAYER_Lower>, <&to LAYER_Lower>;
        };
    };
};

/ {
    macros {
        rgb_ug_status_macro: rgb_ug_status_macro {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_STATUS>;
        };

        bt_0: bt_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 0>;
        };

        bt_1: bt_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 1>;
        };

        bt_2: bt_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 2>;
        };

        bt_3: bt_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 3>;
        };

        hyper: hyper {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LA(LC(LGUI)))>;
            label = "HYPER";
        };
    };
};

/ {
    behaviors {
        magic: magic {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };
    };
};

/* #define for key positions */

#define POS_LH_T1 52
#define POS_LH_T2 53
#define POS_LH_T3 54
#define POS_LH_T4 69
#define POS_LH_T5 70
#define POS_LH_T6 71
#define POS_LH_C1R2 15
#define POS_LH_C1R3 27
#define POS_LH_C1R4 39
#define POS_LH_C1R5 51
#define POS_LH_C2R1 4
#define POS_LH_C2R2 14
#define POS_LH_C2R3 26
#define POS_LH_C2R4 38
#define POS_LH_C2R5 50
#define POS_LH_C2R6 68
#define POS_LH_C3R1 3
#define POS_LH_C3R2 13
#define POS_LH_C3R3 25
#define POS_LH_C3R4 37
#define POS_LH_C3R5 49
#define POS_LH_C3R6 67
#define POS_LH_C4R1 2
#define POS_LH_C4R2 12
#define POS_LH_C4R3 24
#define POS_LH_C4R4 36
#define POS_LH_C4R5 48
#define POS_LH_C4R6 66
#define POS_LH_C5R1 1
#define POS_LH_C5R2 11
#define POS_LH_C5R3 23
#define POS_LH_C5R4 35
#define POS_LH_C5R5 47
#define POS_LH_C5R6 65
#define POS_LH_C6R1 0
#define POS_LH_C6R2 10
#define POS_LH_C6R3 22
#define POS_LH_C6R4 34
#define POS_LH_C6R5 46
#define POS_LH_C6R6 64
#define POS_RH_T1 57
#define POS_RH_T2 56
#define POS_RH_T3 55
#define POS_RH_T4 74
#define POS_RH_T5 73
#define POS_RH_T6 72
#define POS_RH_C1R2 16
#define POS_RH_C1R3 28
#define POS_RH_C1R4 40
#define POS_RH_C1R5 58
#define POS_RH_C2R1 5
#define POS_RH_C2R2 17
#define POS_RH_C2R3 29
#define POS_RH_C2R4 41
#define POS_RH_C2R5 59
#define POS_RH_C2R6 75
#define POS_RH_C3R1 6
#define POS_RH_C3R2 18
#define POS_RH_C3R3 30
#define POS_RH_C3R4 42
#define POS_RH_C3R5 60
#define POS_RH_C3R6 76
#define POS_RH_C4R1 7
#define POS_RH_C4R2 19
#define POS_RH_C4R3 31
#define POS_RH_C4R4 43
#define POS_RH_C4R5 61
#define POS_RH_C4R6 77
#define POS_RH_C5R1 8
#define POS_RH_C5R2 20
#define POS_RH_C5R3 32
#define POS_RH_C5R4 44
#define POS_RH_C5R5 62
#define POS_RH_C5R6 78
#define POS_RH_C6R1 9
#define POS_RH_C6R2 21
#define POS_RH_C6R3 33
#define POS_RH_C6R4 45
#define POS_RH_C6R5 63
#define POS_RH_C6R6 79

/* Custom Defined Behaviors */

/ {
};

/* Automatically generated keymap */

/ {
    combos {
        compatible = "zmk,combos";

        CapsWord {
            bindings = <&caps_word>;
            key-positions = <39 40>;
        };

        LeftShift {
            bindings = <&kp LSHFT>;
            key-positions = <26 38>;
        };

        RightShift {
            bindings = <&kp RSHFT>;
            key-positions = <29 41>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        layer_Base {
            bindings = <
&kp F1                &kp F2    &kp F3   &kp F4    &kp F5                                                                                                               &kp F6    &kp F7     &kp F8   &kp F9     &kp F10
&kp GRAVE             &kp N1    &kp N2   &kp N3    &kp N4    &kp N5                                                                                             &kp N6  &kp N7    &kp N8     &kp N9   &kp N0     &kp MINUS
&mt LGUI TAB          &kp Q     &kp W    &kp F     &kp P     &kp B                                                                                              &kp J   &kp L     &kp U      &kp Y    &kp SEMI   &kp EQUAL
&kp ESC               &kp A     &kp R    &kp S     &kp T     &kp G                                                                                              &kp M   &kp N     &kp E      &kp I    &kp O      &kp SQT
&kp BSLH              &kp Z     &kp X    &kp C     &kp D     &kp V   &kp LSHFT    &kp LGUI   &kp LCTRL  &mt LS(LC(LA(LGUI))) ESC  &mt RGUI DEL  &mt RSHFT BSPC  &kp K   &kp H     &kp COMMA  &kp DOT  &kp FSLH   &kp PG_UP
&magic LAYER_Magic 0  &kp HOME  &kp END  &kp LBKT  &kp RBKT          &lt 1 SPACE  &lt 3 TAB  &kp LALT   &lt 5 LS(MINUS)           &lt 3 RET     &lt 4 SPACE             &kp LEFT  &kp DOWN   &kp UP   &kp RIGHT  &kp PG_DN
            >;
        };

        layer_Lower {
            bindings = <
&none          &none          &none          &none         &none                                                                                                             &kp C_MUTE    &kp C_VOL_DN  &kp C_VOL_UP  &kp F11        &kp F12
&none          &none          &none          &none         &none            &none                                                                                 &none      &none         &none         &none         &none          &kp BSPC
&caps_word     &none          &none          &none         &none            &kp LS(LA(LG(C)))                                                                     &kp GRAVE  &kp MINUS     &kp EQUAL     &kp LBKT      &kp RBKT       &kp BSLH
&kp CAPS       &mt LGUI LEFT  &mt LALT DOWN  &mt LCTRL UP  &mt LSHFT RIGHT  &kp LG(SPACE)                                                                         &kp ESC    &kp LEFT      &kp DOWN      &kp UP        &kp RIGHT      &kp TAB
&kp LG(LS(Z))  &kp LG(Z)      &kp LG(X)      &kp LG(C)     &kp LG(V)        &kp LS(LA(LG(S)))  &mo 7   &trans   &trans  &sk LS(LC(LA(LGUI)))  &kp DEL  &kp BSPC   &kp INS    &kp HOME      &kp PG_DN     &kp PG_UP     &kp END        &kp DEL
&to 0          &kp C_PLAY     &kp C_VOL_DN   &kp C_VOL_UP  &kp C_MUTE                          &trans  &kp TAB  &trans  &sk LC(LA(LSHFT))     &kp RET  &kp SPACE             &kp LC(LEFT)  &kp LC(DOWN)  &kp LC(UP)    &kp LC(RIGHT)  &to 0
            >;
        };

        layer_Magic {
            bindings = <
&bt BT_CLR   &none            &kp CAPS         &kp KP_NUM       &kp SLCK                                                                                  &none       &none         &none         &none       &bt BT_CLR_ALL
&none        &none            &none            &none            &none            &none                                                             &none  &none       &none         &none         &none       &none
&none        &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                   &none  &none       &none         &none         &none       &none
&bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                   &none  &none       &none         &none         &none       &bootloader
&sys_reset   &none            &none            &none            &none            &rgb_ug RGB_EFR  &bt_2  &bt_3  &none         &none  &none  &none  &none  &none       &none         &none         &none       &sys_reset
&none        &none            &none            &none            &none                             &bt_0  &bt_1  &out OUT_USB  &none  &none  &none         &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP  &kp C_PLAY  &none
            >;
        };

        layer_Num {
            bindings = <
&none  &none     &none      &none   &none                                                                                    &none         &none         &none        &none           &none
&none  &none     &none      &none   &none    &none                                                                 &none     &none         &none         &none        &none           &none
&to 6  &kp FSLH  &kp N7     &kp N8  &kp N9   &kp LS(N8)                                                            &kp FSLH  &kp N7        &kp N8        &kp N9       &kp LS(N8)      &none
&none  &kp N0    &kp N4     &kp N5  &kp N6   &kp MINUS                                                             &kp N0    &mt LSHFT N4  &mt LCTRL N5  &mt LALT N6  &mt LGUI MINUS  &none
&none  &kp DOT   &kp N1     &kp N2  &kp N3   &kp LS(EQUAL)  &trans     &trans  &trans  &trans  &kp DEL  &kp BSPC   &kp DOT   &kp N1        &kp N2        &kp N3       &kp LS(EQUAL)   &none
&to 0  &none     &kp COMMA  &kp N0  &kp DOT                 &kp SPACE  &trans  &trans  &mo 6   &trans   &kp SPACE            &kp COMMA     &kp N0        &kp DOT      &none           &to 0
            >;
        };

        layer_Sym {
            bindings = <
&none          &none           &none          &none       &none                                                                                           &none          &none          &none        &none         &none
&none          &none           &none          &none       &none       &none                                                                &none          &none          &none          &none        &none         &none
&kp LS(EQUAL)  &kp LS(N1)      &kp LS(N2)     &kp LS(N3)  &kp LS(N4)  &kp LS(N5)                                                           &kp LS(N6)     &kp LS(N7)     &kp LS(N8)     &kp LS(N9)   &kp LS(N0)    &kp LS(MINUS)
&none          &kp LA(N3)      &kp LS(COMMA)  &kp LS(N9)  &kp LBKT    &kp LS(LBKT)                                                         &kp GRAVE      &kp MINUS      &kp EQUAL      &kp SQT      &kp BSLH      &none
&none          &kp LS(LA(N2))  &kp LS(DOT)    &kp LS(N0)  &kp RBKT    &kp LS(RBKT)  &trans     &trans   &trans  &trans  &trans  &kp BSPC   &kp LS(GRAVE)  &kp LS(MINUS)  &kp LS(EQUAL)  &kp LS(SQT)  &kp LS(BSLH)  &none
&to 0          &none           &none          &none       &none                     &kp SPACE  &kp TAB  &trans  &trans  &trans  &kp SPACE                 &none          &none          &none        &none         &to 0
            >;
        };

        layer_Func {
            bindings = <
&kp F11  &kp F12          &kp F13  &kp F14  &kp F15                                                                                &kp F16    &kp F17    &kp F18   &kp F19   &kp F20
&kp F16  &kp F17          &kp F18  &kp F19  &kp F20     &kp F21                                                             &none  &none      &none      &none     &none     &none
&kp F22  &kp PSCRN        &kp F7   &kp F8   &kp F9      &kp F10                                                             &none  &none      &none      &none     &none     &none
&kp F23  &kp SLCK         &kp F4   &kp F5   &kp F6      &kp F11                                                             &none  &kp LSHFT  &kp LCTRL  &kp LALT  &kp LGUI  &none
&kp F24  &kp PAUSE_BREAK  &kp F1   &kp F2   &kp F3      &kp F12  &trans     &trans   &trans  &kp C_PWR  &kp DEL  &kp BSPC   &none  &none      &none      &none     &none     &none
&to 0    &none            &none    &none    &kp C_MENU           &kp SPACE  &kp TAB  &trans  &trans     &kp RET  &kp SPACE         &none      &none      &none     &none     &to 0
            >;
        };

        layer_NumPad {
            bindings = <
&none       &none         &none      &none      &none                                                                                     &none      &none      &none       &none       &none
&none       &none         &none      &none      &none       &none                                                                  &none  &none      &none      &kp LS(N9)  &kp LS(N0)  &none
&to 0       &kp KP_SLASH  &kp KP_N7  &kp KP_N8  &kp KP_N9   &kp KP_MULTIPLY                                                        &none  &none      &none      &none       &none       &none
&kp KP_NUM  &kp KP_N0     &kp KP_N4  &kp KP_N5  &kp KP_N6   &kp KP_MINUS                                                           &none  &kp LSHFT  &kp LCTRL  &kp LALT    &kp LGUI    &none
&none       &kp KP_N0     &kp KP_N1  &kp KP_N2  &kp KP_N3   &kp KP_PLUS      &kp KP_ENTER  &trans  &trans  &trans  &trans  &trans  &none  &none      &kp COMMA  &kp DOT     &kp FSLH    &none
&to 0       &none         &kp KP_N0  &kp KP_N0  &kp KP_DOT                   &kp SPACE     &trans  &trans  &trans  &trans  &trans         &none      &none      &none       &none       &to 0
            >;
        };

        layer_Tiling {
            bindings = <
&none   &none              &none              &none              &none                                                                                                                                 &none                 &none               &none                 &none                  &none
&none   &none              &none              &none              &none              &none                                                                                               &none          &none                 &none               &none                 &none                  &kp LS(LA(DOT))
&none   &kp LS(LA(LC(A)))  &kp LS(LA(LC(S)))  &kp LS(LA(LC(F)))  &kp LS(LA(LC(D)))  &kp LS(LA(LC(G)))                                                                                   &none          &kp LS(LA(LC(H)))     &kp LS(LA(LC(J)))   &kp LS(LA(LC(K)))     &kp LS(LA(LC(L)))      &kp LS(LA(COMMA))
&none   &kp LS(LA(A))      &kp LS(LA(S))      &kp LS(LA(D))      &kp LS(LA(F))      &kp LS(LA(G))                                                                                       &kp LS(LA(M))  &kp LS(LA(H))         &kp LS(LA(J))       &kp LS(LA(K))         &kp LS(LA(L))          &none
&to 0   &none              &kp LS(LA(LC(X)))  &kp LS(LA(LC(T)))  &kp LS(LA(T))      &kp LCTRL          &trans  &none  &none  &kp LS(LA(LC(Z)))  &kp LS(LA(I))    &kp LS(LC(LA(SPACE)))  &none          &kp LS(LA(LBKT))      &kp LS(LA(RBKT))    &kp LS(LA(LC(LBKT)))  &kp LS(LA(LC(RBKT)))   &kp LS(LA(P))
&trans  &trans             &trans             &trans             &trans                                &trans  &none  &none  &kp LS(LA(Z))      &kp LS(LA(RET))  &kp LS(LA(SPACE))                     &kp LS(LA(LC(LEFT)))  &kp LS(LA(LC(N2)))  &kp LS(LA(LC(N1)))    &kp LS(LA(LC(RIGHT)))  &kp LS(LA(N))
            >;
        };
    };
};
